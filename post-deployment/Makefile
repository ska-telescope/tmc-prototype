# Use bash shell with pipefail option enabled so that the return status of a
# piped command is the value of the last (rightmost) commnand to exit with a
# non-zero status. This lets us pipe output into tee but still exit on test
# failures.
SHELL = /bin/bash
.SHELLFLAGS = -o pipefail -c

TEST_ARTIFACTS = pytest.stdout report.xml report.json cucumber.json pytest-logs.txt

all: test

# create the build directory
# execute the python tests
# copy TEST_ARTIFACTS into build directory
# exit with same exit code as test run
test: install
	tango_admin --add-server LogConsumer/log LogConsumer LogConsumer/log/log01 && \
	(python3 resources/log_consumer/log_consumer.py log &); \
	mkdir -p build && \
	find . -name "*.pyc" -type f -delete && \
	PYTHONPATH=/app:/app/ska-tmc:/app/ska-tmc/post-deployment pytest --count=$(COUNT) $(if $(findstring all,$(MARK)),, -m $(MARK)) --disable-pytest-warnings --timeout=300 $(FILE) | tee pytest.stdout; \
	status=$$?; \
	(tango_admin --delete-server log_consumer/log &) && \
	$(foreach artfct,$(TEST_ARTIFACTS),mv -f $(artfct) build/;) \
	exit $$status

.PHONY: all test install

TEST_RUN_SPEC = example.yaml

test_multiple_runs: install
	tango_admin --add-server LogConsumer/log LogConsumer LogConsumer/log/log01 && \
	(python3 resources/log_consumer/log_consumer.py log &); \
	mkdir -p build && \
	find . -name "*.pyc" -type f -delete && \
	PYTHONPATH=/app:/app/ska-tmc:/app/ska-tmc/post-deployment python3 exploration/test_runs/run_it.py \
		-f exploration/test_runs/specs/$(TEST_RUN_SPEC) | tee pytest.stdout; \
	status=$$?; \
	(tango_admin --delete-server log_consumer/log &) && \
	$(foreach artfct,$(TEST_ARTIFACTS),mv -f $(artfct) build/;) \
	exit $$status


install:
	pip3 install -r test_requirements.txt


setup_ipython:
	ipython profile create &&  \
	cp resources/ipython_config.py /home/tango/.ipython/profile_default/ipython_config.py 

config_git:
	git config --global user.name '$(GIT_USER)'
	git config --global user.email $(GIT_EMAIL)


set_auto_complete:
	echo 'source <(kubectl completion bash)' >>~/.bashrc


export_extensions:
	cd ~ && \
	tar -cvzf vscode-server.tar .vscode-server && \
	mv vscode-server.tar ~/ska-tmc/vscode-server.tar

get_mem_usage:
	@raw=$$(cat /sys/fs/cgroup/memory/memory.usage_in_bytes) && \
	mb=$$(expr 1024 \* 1024) && \
	MB=$$(expr $$raw / $$mb) && \
	echo "$$MB"MB

get_cpu_usage:
	@raw=$$(cat /sys/fs/cgroup/cpu/cpu.shares ) && \
	echo $$raw

SPEC=example.yaml
run_multiple:
	python3 exploration/test_runs/run_it.py -f exploration/test_runs/specs/$(SPEC)
