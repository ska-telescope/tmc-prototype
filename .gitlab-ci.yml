# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - join-reports
  - build
  - test
  - publish
  - pages
  - scan
  - lifecycle

join_linting_reports:
  stage: join-reports
  tags:
    - k8srunner
  script:
    - echo "This step is needed as the artifacts can't be passed in the same stage"
    - make join-lint-reports
  artifacts:
    paths:
      - build/
    when: always

include:
# # # Helm Chart linting and Publish
# Note: Commenting this part to Disable helm chart linting and Publish job from the pipeline 
# - project: 'ska-telescope/templates-repository'
#   file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# # Python packages build,lint, test and publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/python.gitlab-ci.yml'

# # OCI images build and publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

# # Docs pages
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

# k8s steps
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# Release Automation
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/release.gitlab-ci.yml'


# k8s test stage template

k8s-low-test:
  # allow_failure: true
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: test
  tags:
    - k8srunner-large
  variables:
    TELESCOPE: 'SKA-low'
    CONFIG: 'low'
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-$CONFIG'
    SERVICE_ACCOUNT: 'ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-$CONFIG'
  before_script:
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - 'make help | grep k8s-test'
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - make k8s-install-chart
    - make k8s-wait
  script:
    - make k8s-test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test
    auto_stop_in: 1 minute
  rules:
    - exists:
        - tests/**/*

k8s-test:
  # allow_failure: true
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: test
  tags:
    - k8srunner-large
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  before_script:
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - 'make help | grep k8s-test'
    - make k8s-install-chart
    - make k8s-wait
  script:
    - make k8s-test || true
    - |
      if [[ "$CI_KEEP_NAMESPACE" != "true" ]]; then
        make k8s-uninstall-chart || true
        make k8s-delete-namespace || true
      fi;
    # ST-1258: Cleanup and exit if the test return code is present
    - '[ -f build/status ] || (echo "Something went wrong with the test (no build/status file); exit 1")'
    - exit $(cat build/status)
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test
    auto_stop_in: 1 minute
  rules:
    - exists:
        - tests/**/*

stop-k8s-test-low:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: test
  tags:
    - k8srunner
  when: manual
  variables:
    TELESCOPE: 'SKA-low'
    CONFIG: 'low'
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-$CONFIG'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    action: stop

docs-build-rtd:
  rules:
    - when: never

