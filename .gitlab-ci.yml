# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.10

variables:
  DOCKER_DRIVER: overlay2

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

before_script:
  - python3 -m pip install -r requirements-dev.txt
  - python3 -m pip install pipdeptree

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - unit-test
  - test
  - linting
  - release
  - publish
  - pages

build ska-tmc-centralnode-low wheel for publication: # Executed on a tag
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-centralnode-low
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-centralnode-low/dist/

build ska-tmc-centralnode-low wheel for development: # Executed on a commit
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-centralnode-low
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-centralnode-low/dist/

build ska-tmc-subarraynode-low wheel for publication: # Executed on a tag
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-subarraynode-low
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-subarraynode-low/dist/

build ska-tmc-subarraynode-low wheel for development: # Executed on a commit
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-subarraynode-low
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-subarraynode-low/dist/

build DishLeafNode wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./ska-tmc/dishleafnode
    - python3 setup.py egg_info sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/dishleafnode/dist/

build DishLeafNode wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./ska-tmc/dishleafnode
    - python3 setup.py egg_info sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/dishleafnode/dist/

build ska-tmc-cspmasterleafnode-mid wheel for publication: # Executed on a tag
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-cspmasterleafnode-mid
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-cspmasterleafnode-mid/dist/

build ska-tmc-cspmasterleafnode-mid wheel for development: # Executed on a commit
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-cspmasterleafnode-mid
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-cspmasterleafnode-mid/dist/

build ska-tmc-cspsubarrayleafnode-mid wheel for publication: # Executed on a tag
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-cspsubarrayleafnode-mid
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-cspsubarrayleafnode-mid/dist/


build ska-tmc-sdpmasterleafnode-mid wheel for publication: # Executed on a tag
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-sdpmasterleafnode-mid
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-sdpmasterleafnode-mid/dist/


build ska-tmc-sdpmasterleafnode-mid wheel for development: # Executed on a commit
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-sdpmasterleafnode-mid
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-sdpmasterleafnode-mid/dist/

build ska-tmc-cspsubarrayleafnode-mid wheel for development: # Executed on a commit
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-cspsubarrayleafnode-mid
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-cspsubarrayleafnode-mid/dist/

build ska-tmc-sdpsubarrayleafnode-mid wheel for publication: # Executed on a tag
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-sdpsubarrayleafnode-mid
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-sdpsubarrayleafnode-mid/dist/

build ska-tmc-sdpsubarrayleafnode-mid wheel for development: # Executed on a commit
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-sdpsubarrayleafnode-mid
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-sdpsubarrayleafnode-mid/dist/

build ska-tmc-mccsmasterleafnode-low wheel for publication: # Executed on a tag
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-mccsmasterleafnode-low
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-mccsmasterleafnode-low/dist/

build ska-tmc-mccsmasterleafnode-low wheel for development: # Executed on a commit
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-mccsmasterleafnode-low
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-mccsmasterleafnode-low/dist/

build ska-tmc-mccssubarrayleafnode-low wheel for publication: # Executed on a tag
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-mccssubarrayleafnode-low
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-mccssubarrayleafnode-low/dist/

build ska-tmc-mccssubarrayleafnode-low wheel for development: # Executed on a commit
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  script:
    - cd ./ska-tmc/ska-tmc-mccssubarrayleafnode-low
    - python3 setup.py egg_info sdist bdist_wheel
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in ./dist/*.whl ./dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/ska-tmc-mccssubarrayleafnode-low/dist/

build DishMaster wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./ska-tmc/dishmaster
    - python3 setup.py egg_info sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/dishmaster/dist/

build DishMaster wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./ska-tmc/dishmaster
    - python3 setup.py egg_info sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./ska-tmc/dishmaster/dist/

# unit tests:
#   image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.10
#   stage: unit-test
#   tags:
#     - docker-executor
#   script:
#     - make unit-test
#   artifacts:
#     paths:
#       - ./build


build-image:
  stage: build
  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
  tags:
    - k8srunner
  script:
    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker build --pull --tag "$IMG" .
    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker push "$IMG"
  artifacts:
    paths:
      - current_tag.txt

# test-mid:
#    stage: test
#    dependencies:
#      - build-image
#    tags:
#      - k8srunner
#    image: nexus.engageska-portugal.pt/ska-docker/deploy:0.4.3
#    before_script:
#      - kubectl get namespace
#    script:
#      - kubectl version
#      - make clean
#      - make install-chart MINIKUBE=false
#      - make wait
#      - make smoketest
#      - make test MARK=mid && [ -f "build/report.xml" ]
#    after_script:
#      - make uninstall-chart
#      - make clean
#      - make delete_namespace-sdp
#      - make delete_namespace
#      - mkdir -p build
#      - ls -la build
#    environment:
#      name: test
#      kubernetes:
#        namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-mid
#    artifacts:
#      name: "$CI_PROJECT_NAME-$CI_JOB_ID"
#      paths:
#        - build
#      reports:
#        junit: build/report.xml
#      when: always


# test-low:
#   stage: test
#   dependencies:
#     - build-image
#   tags:
#     - k8srunner
#   image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
#   before_script:
#     - kubectl get namespace
#   script:
#     - kubectl version
#     - make clean
#     - make install-chart MINIKUBE=false HELM_CHART=ska-tmc-low-umbrella UMBRELLA_CHART_PATH=charts/ska-tmc-low-umbrella/
#     - make wait
#     - make smoketest
#     - make test MARK=low && [ -f "build/report.xml" ]
#   after_script:
#     - make uninstall-chart HELM_CHART=ska-tmc-low-umbrella UMBRELLA_CHART_PATH=charts/ska-tmc-low-umbrella/
#     - make clean
#     - make delete_namespace-sdp
#     - make delete_namespace
#     - mkdir -p build
#     - ls -la build
#   environment:
#     name: test
#     kubernetes:
#       namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-low
#   artifacts:
#     name: "$CI_PROJECT_NAME-$CI_JOB_ID"
#     paths:
#       - build
#     reports:
#       junit: build/report.xml


# linting:
#   stage: linting
#   image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.10
#   tags:
#     - docker-executor
#   script:
#     - make lint
#   allow_failure: true
#   artifacts:
#     paths:
#       - ./build

publish to nexus:
  stage: publish
  tags:
    - docker-executor
  script:
    - python3 -m pip install twine
    #- twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-centralnode-low/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-subarraynode-low/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/dishleafnode/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-cspmasterleafnode-mid/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-sdpmasterleafnode-mid/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-mccsmasterleafnode-low/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/dishmaster/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-sdpsubarrayleafnode-mid/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-cspsubarrayleafnode-mid/dist/*
    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-mccssubarrayleafnode-low/dist/*
  when: manual
  # only:
  #   variables:
  #     - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
  #     - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/ # Confirm semantic versioning of tag

pages:
  stage: pages
  tags:
    - docker-executor
  only:
    - master
  script:
    - mv build public
    - mv public/reports/cspmasterleafnode_htmlcov/* public
    - mv public/reports/cspsubarrayleafnode_htmlcov/* public
    - mv public/reports/sdpsubarrayleafnode_htmlcov/* public
    - mv public/reports/mccssubarrayleafnode_htmlcov/* public
    - mv public/reports/mccsmasterleafnode_htmlcov/* public
    - mv public/reports/sdpmasterleafnode_htmlcov/* public
    - mv public/reports/dishleafnode_htmlcov/* public
    - mv public/reports/subarraynodelow_htmlcov/* public
    - mv public/reports/centralnodelow_htmlcov/* public
  artifacts:
    paths:
      - public

release tmc:
  stage: release
  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
  before_script:
  - docker login -u $CAR_OCI_REGISTRY_USERNAME -p $CAR_OCI_REGISTRY_PASSWORD $CAR_OCI_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - make release-ska-tmc USERNAME=$GITLAB_USER_NAME EMAILID=$GITLAB_USER_EMAIL # Publish tag on the gitlab and tagged image on Nexus
  when: manual

# Standardised included jobs
variables:
  CHARTS_TO_PUBLISH: ska-tmc-low ska-tmc-mid
include:
# Helm Chart Publish
# https://developer.skatelescope.org/en/latest/development/software_package_release_procedure.html#package-and-publish-helm-charts-to-the-ska-helm-chart-repository
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm_publish.yml'
# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/post_step.yml'