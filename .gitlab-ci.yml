# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:0.2.2

variables:
  DOCKER_DRIVER: overlay2

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - test
  - linting
  - publish
  - pages
  - release
  - trigger

build CentralNode wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/centralnode
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/centralnode/dist/

build CentralNode wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/centralnode
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/centralnode/dist/

build SubarrayNode wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/subarraynode
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/subarraynode/dist/

build SubarrayNode wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/subarraynode
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/subarraynode/dist/

# For development purpose only when testing locally in docker env.
build CspSubarray wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/CspSubarray
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/CspSubarray/dist/

# For development purpose only when testing locally in docker env.
build SdpSubarray wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/SdpSubarray
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/SdpSubarray/dist/

build DishLeafNode wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/dishleafnode
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/dishleafnode/dist/

build DishLeafNode wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/dishleafnode
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/dishleafnode/dist/

build CspMasterLeafNode wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/cspmasterleafnode
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/cspmasterleafnode/dist/

build CspMasterLeafNode wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/cspmasterleafnode
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/cspmasterleafnode/dist/

build CspSubarrayLeafNode wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/cspsubarrayleafnode
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/cspsubarrayleafnode/dist/


build SdpMasterLeafNode wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/sdpmasterleafnode
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/sdpmasterleafnode/dist/


build SdpMasterLeafNode wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/sdpmasterleafnode
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/sdpmasterleafnode/dist/

build CspSubarrayLeafNode wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/cspsubarrayleafnode
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/cspsubarrayleafnode/dist/

build SdpSubarrayLeafNode wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/sdpsubarrayleafnode
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/sdpsubarrayleafnode/dist/

build SdpSubarrayLeafNode wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/sdpsubarrayleafnode
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/sdpsubarrayleafnode/dist/


build DishMaster wheel for publication: # Executed on a tag
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/dishmaster
    - python setup.py egg_info -b+$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  only:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/dishmaster/dist/

build DishMaster wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/dishmaster
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/dishmaster/dist/

# For development purpose only when testing locally in docker env.
build SdpMaster wheel for development: # Executed on a commit
  stage: build
  tags:
    - docker-executor
  script:
    - cd ./tmcprototype/SdpMaster
    - python setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  except:
    - tags
  artifacts:
    paths:
      - ./tmcprototype/SdpMaster/dist/

run tests:
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  stage: test
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - make test
    - make push
  retry: 2

unit tests:
  image: nexus.engageska-portugal.pt/tango-example/tmcprototype:latest
  stage: test
  tags:
    - docker-executor
  before_script:
    - pipenv install --dev
  script:
    - mkdir test_results
    - |-
      for path in `find ./tmcprototype/*/test  -type d -name unit`; do
        export TMC_ELEMENT=$(basename $(dirname $(dirname "$path")))
        echo "+++ Installing ${TMC_ELEMENT} for tests"
        python3 -m pip list
        python3 -m pip search centralnode
        echo $?
        echo "+++ Trying tests for ${TMC_ELEMENT}"
        pytest -v tmcprototype/${TMC_ELEMENT}/test/unit \
          --forked \
          --cov=tmcprototype/${TMC_ELEMENT} \
          --cov-report=html:./test_results/${TMC_ELEMENT}_htmlcov \
          --json-report --json-report-file=./test_results/${TMC_ELEMENT}_report.json \
          --junitxml=./test_results/${TMC_ELEMENT}-unit-tests.xml
      done
  artifacts:
    paths:
      - ./test_results

linting:
  stage: linting
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  tags:
    - docker-executor
  script:
    - apt-get -y update
    - apt-get install -y python3-pip python3-setuptools python3-wheel --no-install-recommends
    - make lint
  allow_failure: true
  artifacts:
    paths:
      - ./build

publish to nexus:
  stage: publish
  tags:
    - docker-executor
  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD
  script:
    - pip install twine
    - twine upload --repository-url $PYPI_REPOSITORY_URL ./tmcprototype/centralnode/dist/*
    - twine upload --repository-url $PYPI_REPOSITORY_URL ./tmcprototype/subarraynode/dist/*
    - twine upload --repository-url $PYPI_REPOSITORY_URL ./tmcprototype/dishleafnode/dist/*
    - twine upload --repository-url $PYPI_REPOSITORY_URL ./tmcprototype/cspmasterleafnode/dist/*
    - twine upload --repository-url $PYPI_REPOSITORY_URL ./tmcprototype/sdpmasterleafnode/dist/*
    - twine upload --repository-url $PYPI_REPOSITORY_URL ./tmcprototype/dishmaster/dist/*
    - twine upload --repository-url $PYPI_REPOSITORY_URL ./tmcprototype/sdpsubarrayleafnode/dist/*
    - twine upload --repository-url $PYPI_REPOSITORY_URL ./tmcprototype/cspsubarrayleafnode/dist/*

  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
      - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/ # Confirm semantic versioning of tag

pages:
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  tags:
    - docker-executor
  stage: pages
  only:
    - master
  script:
    - mv build public
    - mv public/dishmaster_htmlcov/* public
    - mv public/cspmasterleafnode_htmlcov/* public
    - mv public/cspsubarrayleafnode_htmlcov/* public
    - mv public/sdpsubarrayleafnode_htmlcov/* public
    - mv public/sdpmasterleafnode_htmlcov/* public
    - mv public/dishleafnode_htmlcov/* public
    - mv public/subarraynode_htmlcov/* public
    - mv public/centralnode_htmlcov/* public
    - make push
  artifacts:
    paths:
      - public

create ci metrics:
  stage: .post
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  when: always
  tags:
    - docker-executor
  script:
    # Gitlab CI badges creation: START
    - apt-get -y update
    - apt-get install -y curl --no-install-recommends
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    # Gitlab CI badges creation: END
  artifacts:
    paths:
      - ./build

#trigger:
#  image: appropriate/curl
#  stage: trigger
#  tags:
#  - docker-executor
#  script:
#  - curl -X POST -F token=$K8S_INTEGRATION_TOKEN -F ref=$K8S_INTEGRATION_TARGET_BRANCH -F "variables[HELM_CHART]=tmc-proto" https://gitlab.com/api/v4/projects/$K8S_INTEGRATION_PROJ_ID/trigger/pipeline

release tmc:
  stage: release
  image: nexus.engageska-portugal.pt/ska-docker/tango-builder:latest
  before_script:
  - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - make push-tag-and-versioned-image USERNAME=$GITLAB_USER_NAME EMAILID=$GITLAB_USER_EMAIL # Publish tag on the gitlab and tagged image on Nexus
  when: manual
  only:
    refs:
      - master
