# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - join-reports
  - build
  - test
  - publish
  - pages
  - scan
  - lifecycle

join_linting_reports:
  stage: join-reports
  tags:
    - k8srunner
  script:
    - echo "This step is needed as the artifacts can't be passed in the same stage"
    - make join-lint-reports
  artifacts:
    paths:
      - build/
    when: always

include:
# # Helm Chart linting and Publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# # Python packages build,lint, test and publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/python.gitlab-ci.yml'

# # OCI images build and publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

# # Docs pages
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'


#build-image:
#  stage: build
#  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
#  tags:
#    - k8srunner
#  script:
#    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
#    - docker build --pull --tag "$IMG" .
#    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
#    - docker push "$IMG"
#  artifacts:
#    paths:
#      - current_tag.txt
#
#test-mid:
#   stage: test
#   dependencies:
#     - build-image
#   tags:
#     - k8srunner
#   image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
#   before_script:
#     - kubectl get namespace
#     - make clean
#   script:
#     - kubectl version
#     - make install-chart MINIKUBE=false
#     - curl -s https://gitlab.com/ska-telescope/templates-repository/-/raw/master/scripts/namespace_auth.sh | bash -s "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG" "ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-mid" "ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-mid-sdp" || true
#     - make wait
#     - make smoketest
#     - make test MARK=mid COUNT=1 && [ -f "build/report.xml" ]
#   after_script:
#     - mkdir -p build
#     - ls -la build
#   environment:
#     name: test/$CI_COMMIT_REF_SLUG
#     kubernetes:
#       namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-mid
#     on_stop: tmc-mid_uninstall
#     auto_stop_in: 2 hours
#   artifacts:
#     name: "$CI_PROJECT_NAME-$CI_JOB_ID"
#     paths:
#       - build
#     reports:
#       junit: build/report.xml
#     when: always
#
#tmc-mid_uninstall:
#  stage: clean
#  tags:
#    - k8srunner
#  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
#  before_script:
#    - kubectl get namespace
#  script:
#    - make uninstall-chart
#    - make clean
#    - make delete_namespace-sdp
#    - make delete_namespace
#  environment:
#    name: test/$CI_COMMIT_REF_SLUG
#    kubernetes:
#      # This repetition is needed for gitlab to parse the namespace correctly
#      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-mid
#    action: stop
#  when: manual
#
#test-low:
#  stage: test
#  dependencies:
#    - build-image
#  tags:
#    - k8srunner
#  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
#  before_script:
#    - kubectl get namespace
#    - make clean
#  script:
#    - kubectl version
#    - make install-chart MINIKUBE=false HELM_CHART=ska-tmc-low-umbrella UMBRELLA_CHART_PATH=charts/ska-tmc-low-umbrella/
#    - curl -s https://gitlab.com/ska-telescope/templates-repository/-/raw/master/scripts/namespace_auth.sh | bash -s "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG" "ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-low" "ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-low-sdp" || true
#    - make wait
#    - make smoketest
#    - make test MARK=low COUNT=1 && [ -f "build/report.xml" ]
#  after_script:
#    - mkdir -p build
#    - ls -la build
#  environment:
#    name: test/$CI_COMMIT_REF_SLUG
#    kubernetes:
#      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-low
#    on_stop: tmc-low_uninstall
#    auto_stop_in: 2 hours
#  artifacts:
#    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
#    paths:
#      - build
#    reports:
#      junit: build/report.xml
#
#tmc-low_uninstall:
#  stage: clean
#  dependencies:
#    - build-image
#  tags:
#    - k8srunner
#  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
#  before_script:
#    - kubectl get namespace
#  script:
#    - make uninstall-chart HELM_CHART=ska-tmc-low-umbrella UMBRELLA_CHART_PATH=charts/ska-tmc-low-umbrella/
#    - make clean
#    - make delete_namespace-sdp
#    - make delete_namespace
#  environment:
#    name: test/$CI_COMMIT_REF_SLUG
#    kubernetes:
#      # This repetition is needed for gitlab to parse the namespace correctly
#      namespace: ci-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-low
#    action: stop
#  when: manual

#publish to nexus:
#  stage: publish
#  tags:
#    - docker-executor
#  script:
#    - python3 -m pip install twine
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-dishleafnode-mid/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska_tmc_centralnode_low/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-subarraynode-low/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska_tmc_cspmasterleafnode_mid/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-sdpmasterleafnode-mid/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-mccsmasterleafnode-low/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska_dish_master_mid/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-sdpsubarrayleafnode-mid/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-cspsubarrayleafnode-mid/dist/*
#    - twine upload --username ${CAR_PYPI_USERNAME} --password ${CAR_PYPI_PASSWORD} --repository-url $CAR_PYPI_REPOSITORY_URL ./ska-tmc/ska-tmc-mccssubarrayleafnode-low/dist/*
#  when: manual
#  only:
#    variables:
#      - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
#      - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/ # Confirm semantic versioning of tag
#

#release tmc:
#  stage: release
#  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
#  before_script:
#  - docker login -u $CAR_OCI_REGISTRY_USERNAME -p $CAR_OCI_REGISTRY_PASSWORD $CAR_OCI_REGISTRY_HOST
#  tags:
#    - docker-executor
#  script:
#    - make release-ska-tmc USERNAME=$GITLAB_USER_NAME EMAILID=$GITLAB_USER_EMAIL # Publish tag on the gitlab and tagged image on Nexus
#  when: manual
#
#release ska-alarm-handler:
#  stage: release
#  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
#  before_script:
#  - docker login -u $CAR_OCI_REGISTRY_USERNAME -p $CAR_OCI_REGISTRY_PASSWORD $CAR_OCI_REGISTRY_HOST
#  tags:
#    - docker-executor
#  script:
#    - cd ./ska-tmc/tmalarmhandler
#    - docker build -t $CAR_OCI_REGISTRY_HOST/ska-alarm-handler:$ALARM_HANDLER_IMG_VER .
#    - docker push $CAR_OCI_REGISTRY_HOST/ska-alarm-handler:$ALARM_HANDLER_IMG_VER
#  when: manual
#
## Standardised included jobs
#variables:
#  CHARTS_TO_PUBLISH: ska-tmc-low ska-tmc-mid
#  ALARM_HANDLER_IMG_VER: "0.1.7"  # Update alarm handler image version before publishing an image